@using 專題Version1.Models

@{
    ViewBag.Title = "GetTransactions";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section style {
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <style>
        .content-wrapper {
            padding: 20px;
        }

        .transaction-header {
            font-size: 1.5em;
            margin-bottom: 20px;
        }

        .datepicker {
            margin: 10px 0;
        }

        .table th, .table td {
            text-align: center;
        }

        .pagination {
            justify-content: center;
        }

        .table-responsive {
            margin-top: 20px;
        }

        .btn-primary {
            margin-top: 10px;
        }

        .note {
            color: orangered;
            margin-top: 10px;
        }
    </style>
}

<div class="main-panel">
    <div class="content-wrapper">
        <div class="transaction-header">交易紀錄查詢</div>
        <br />
        <div class="col-lg-12 grid-margin stretch-card">
            <label>選擇帳號:</label>
            @if (Session["User"] != null)
            {
                <select id="accountDropdown" class="form-control">
                    @foreach (var account in ViewBag.Accounts)
                    {
                        <option value="@account.Value">@account.Text</option>
                    }
                </select>
            }
        </div>
        <div class="datepicker">
            <i class="ti-timer"></i>
            <input type="text" id="datepicker1" class="form-control-inline">
            -
            <input type="text" id="datepicker2" class="form-control-inline">
        </div>
        @*<button class="btn btn-primary" v-on:click="fetchTransactions">查詢</button>*@
        <p class="note">僅可查詢三個月內交易紀錄</p>

        <div class="col-lg-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">帳戶號碼: <code>{{ accountDetails.AccountNumber }}</code></h4>
                    <p class="card-description">帳戶類型: <code>{{ accountDetails.AccountType }}</code></p>
                    <div class="table-responsive pt-3">
                        <table class="table table-dark">
                            <thead>
                                <tr>
                                    <th>交易日期</th>
                                    <th>交易金額</th>
                                    <th>交易類別</th>
                                    <th>交易後餘額</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="transaction in paginatedTransactions" :key="transaction.TransactionID">
                                    <td>{{ formatDate(transaction.TransactionDate) }}</td>
                                    <td>{{ formatAmount(transaction.Amount) }}</td>
                                    <td>{{ transaction.TransactionType }}</td>
                                    <td>{{ formatAmount(transaction.BalanceAfterTransaction) }}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <nav aria-label="Page navigation">
                        <ul class="pagination">
                            <li class="page-item" :class="{ disabled: currentPage === 1 }">
                                <a class="page-link" href="#" v-on:click.prevent="changePage(currentPage - 1)">Previous</a>
                            </li>
                            <li class="page-item" :class="{ active: page === currentPage }" v-for="page in totalPages" :key="page">
                                <a class="page-link" href="#" v-on:click.prevent="changePage(page)">{{ page }}</a>
                            </li>
                            <li class="page-item" :class="{ disabled: currentPage === totalPages }">
                                <a class="page-link" href="#" v-on:click.prevent="changePage(currentPage + 1)">Next</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

@section script {
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>

    <script>
        $(document).ready(function () {
            var startDate = new Date();
            startDate.setDate(startDate.getDate() - 90);

            $("#datepicker1").datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                showButtonPanel: true,
                maxDate: new Date(),
                minDate: startDate,
                onSelect: function (dateText) {
                    app.fetchTransactions(); // 調用 Vue 實例中的 fetchTransactions 方法
                }
            });

            $("#datepicker2").datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                showButtonPanel: true,
                maxDate: new Date(),
                onSelect: function (dateText) {
                    app.fetchTransactions(); // 調用 Vue 實例中的 fetchTransactions 方法
                }
            }).datepicker("setDate", new Date());
        });

        var app = new Vue({
            el: '.main-panel',
            data: {
                accountDetails: {
                    AccountNumber: '',
                    AccountType: '',
                    Transactions: []
                },
                currentPage: 1,
                itemsPerPage: 10,
                startDate: '', // 添加 startDate 屬性來存儲開始日期
                endDate: '' // 添加 endDate 屬性來存儲結束日期
            },
            computed: {
                paginatedTransactions() {
                    const start = (this.currentPage - 1) * this.itemsPerPage;
                    const end = start + this.itemsPerPage;
                    return this.accountDetails.Transactions.slice(start, end);
                },
                totalPages() {
                    return Math.ceil(this.accountDetails.Transactions.length / this.itemsPerPage);
                }
            },
            methods: {
                formatAmount(amount) {
                    // 假設 amount 是數字類型
                    if (typeof amount !== 'number') {
                        return ''; // 或者其他處理方式，視情況而定
                    }

                    // 使用正則表達式將金額格式化為千位分隔符的形式
                    const formattedAmount = amount.toFixed(0).replace(/\d(?=(\d{3})+$)/g, '$&,');
                    return formattedAmount;
                },
                formatDate(date) {
                    return new Date(date).toLocaleDateString('zh-TW');
                },
                fetchTransactions() {
                    var accountNumber = $('#accountDropdown').val();
                    this.startDate = $('#datepicker1').val(); // 更新 Vue 實例中的 startDate
                    this.endDate = $('#datepicker2').val(); // 更新 Vue 實例中的 endDate

                    $.ajax({
                        url: '/TransactionAPI/GetTransactions',
                        method: 'GET',
                        data: { accountNumber: accountNumber, startDate: this.startDate, endDate: this.endDate },
                        success: (data) => {
                            this.accountDetails = data;
                            this.currentPage = 1; // Reset to first page
                        },
                        error: (error) => {
                            console.error('Failed to fetch transactions', error);
                        }
                    });
                },
                changePage(page) {
                    if (page > 0 && page <= this.totalPages) {
                        this.currentPage = page;
                    }
                }
            },
            mounted() {
                // 初始化時也執行一次 fetchTransactions，確保初始數據正確
                this.fetchTransactions();
            }
        });

    </script>
}
